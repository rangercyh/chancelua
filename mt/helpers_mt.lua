local mt = {}

function mt:capitalize()
end
function mt:mixin()
end
--[[
  Given a function that generates something random and a number of items to generate,
    return an array of items where none repeat.


    @param {Function} fn the function that generates something random
  @param {Number} num number of terms to generate
  @param {Object} options any options to pass on to the generator function
  @returns {Array} an array of length `num` with every item generated by `fn` and unique

  There can be more parameters after these. All additional parameters are provided to the given function
]]
function mt:unique()
end
--[[
  Gives an array of n random terms

  @param {Function} fn the function that generates something random
  @param {Number} n number of terms to generate
  @returns {Array} an array of length `n` with items generated by `fn`

  There can be more parameters after these. All additional parameters are provided to the given function
]]
function mt:n()
end
-- H/T to SO for this one: http://vq.io/OtUrZ5
function mt:pad()
end

-- return a random element from a array or a random slice array
function mt:pick(arr, count)
    assert(#arr > 0, "Chance: Cannot pick() from an empty array")
    if not count or count == 1 then
        return arr[self:natural({max = #arr})]
    else
        return table.move(self:shuffle(arr), 1, count, 1, {})
    end
end

-- Given an array, returns a single random element
function mt:pickone()
end
-- Given an array, returns a random set with 'count' elements
function mt:pickset()
end

function mt:shuffle(t)
    local n = #t
    for i = 1, n do
        local j = self:natural({max = n})
        t[i], t[j] = t[j], t[i]
    end
    return t
end

-- Returns a single item from an array with relative weighting of odds
function mt:weighted()
end

return mt
